#allocate_result: begin
    push(gettemp()); {Just allocate a variable for the result in the bottom of stack}
end
#true_case: begin
    {Here, we at the top of the stack we have the address of result of true case}
    {We allocate the result to the temp variable but we may replace it later if the condition is false.}
    {My main idea was somehow like branch predictors and cmove instruction in Intel assembly}
    PB[i] = (:=, SS[top - 1], SS[top]);
    i++;
    pop(1);
end
#condition: begin
    {Here, we at the top of the stack we have the address of result of the condition}
    {However, we cannot write the branch because we need to know the address of the end of the `else`}
    push(i);
    i++;
end
#exited: begin
    {Here, we at the top of the stack we have the address of result of the `else` expression}
    {If we have reached here, we assign the result variable to the result of expression in runtime}
    PB[i] = (:=, SS[top - 3], SS[top]);
    i++;
    pop(1);
    {Now we do the backpacthing for the result branch}
    PB[SS[top]] = (jpt, SS[top - 1], i) {If SS[top - 1] is true jump to i (skip the else)}
    pop(2); {Pop backpatch address, and the result of evaluation}
    {We leave the first gettemp() as the result here for next instructions}
end